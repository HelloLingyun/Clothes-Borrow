<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:aop="http://www.springframework.org/schema/aop"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
        
        <!-- 不扫描含有controller的类 -->
        <context:component-scan base-package="org.clothes">
        	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>
        
      <!-- Spring配置文件的核心点(数据源,与mybaits的整合,事务控制)  -->
     <!--================配置数据源 ======================-->
     <context:property-placeholder location="classpath:dbconfig.properties"/> 
	<bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}">	</property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
    <!--=============================================-->  
    
    <!--===============配置Mybatis整合===================-->
        <bean id="sqlSessionfactory" class="org.mybatis.spring.SqlSessionFactoryBean">
     		<!-- 指定myBatis全局配置文件的位置 -->
     		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
     		<property name="dataSource" ref="pooledDataSource" />
     		<!-- 指定mybitsMapper文件的位置 -->
     		<property name="mapperLocations" value="classpath:mapper/*.xml" />
     </bean>   
     <!-- 配置扫描器,将mybatis接口的实现加入到ioc容器中 -->
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
     	<!-- 扫描所有Dao接口的实现，加入到ioc容器中 -->
     		<property name="basePackage"  value="org.clothes.dao"></property>
     </bean>
     
     <!-- 配置可以执行批量的sqlSession -->
     <bean id="sqlSession"  class="org.mybatis.spring.SqlSessionTemplate">
     		<constructor-arg name="sqlSessionFactory" ref="sqlSessionfactory"></constructor-arg>
     		<constructor-arg name="executorType" value="BATCH"></constructor-arg>
     </bean>
     <!--=============================================-->     
        
     <!--================= 事务控制 ======================-->  
     <bean id="transactionManager"  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
     	<!-- 控制数据源 -->
     		<property name="dataSource" ref="pooledDataSource" />
     </bean> 
     <!-- 开启基于注解的事务，使用xml配置形式的事务(必要主要的都是使用配置式) -->
     <aop:config>
     	<!-- 切入点表达式 -->
     	<aop:pointcut expression="execution(* org.clothes.service..*(..))" id="txPoint"/>
     	<!-- 配置事务增强 -->
     	<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
     </aop:config>
     <!-- 配置事务增强,事务如何切入 -->
     <tx:advice id="txAdvice"  transaction-manager="transactionManager">
     	<tx:attributes>
     		<!-- 所有方法都是事务方法 -->
     		<tx:method name="*"/>
     		<!-- 已get开头的所有方法(当想要已get开头的方法都是查询，可以设置read-only为true优化) -->
     		<tx:method name="get*" read-only="true"/>
     	</tx:attributes>
     </tx:advice>
     <!--=============================================-->  
     
</beans>